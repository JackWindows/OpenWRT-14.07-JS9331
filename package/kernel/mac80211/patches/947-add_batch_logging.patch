--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -1004,6 +1004,51 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t read_max_timing_count(struct file *file, char __user *user_buf,
+											size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	char buf[32];
+	unsigned int len;
+
+	len = sprintf(buf, "%d\n", sc->sc_ah->max_timing_count);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_max_timing_count(struct file *file, char __user *user_buf,
+											size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	struct ath_hw *ah = sc->sc_ah;
+	unsigned long max_timing_count;
+	char buf[32];
+	ssize_t len;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+
+	buf[len] = '\0';
+	if (kstrtoul(buf, 0, &max_timing_count))
+		return -EINVAL;
+
+	if (max_timing_count <=0 || max_timing_count > 1000)
+		return -EINVAL;
+
+	ah->max_timing_count = max_timing_count;
+	ah->current_timing_count = 0;
+
+	return count;
+}
+
+static const struct file_operations fops_max_timing_count = {
+	.read = read_max_timing_count,
+	.write = write_max_timing_count,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t read_file_regidx(struct file *file, char __user *user_buf,
                                 size_t count, loff_t *ppos)
 {
@@ -1586,6 +1631,9 @@ int ath9k_init_debug(struct ath_hw *ah)
 	debugfs_create_u32("force_quiet_bit_restore_in", S_IRUSR | S_IWUSR,
 				sc->debug.debugfs_phy,
 				&ah->force_quiet_bit_restore_in);
+	debugfs_create_file("max_timing_count", S_IRUSR | S_IWUSR,
+				sc->debug.debugfs_phy, sc,
+				&fops_max_timing_count);
 	debugfs_create_file("misc", S_IRUSR, sc->debug.debugfs_phy, sc,
 			    &fops_misc);
 	debugfs_create_file("reset", S_IRUSR, sc->debug.debugfs_phy, sc,
--- a/drivers/net/wireless/ath/ath9k/hw.h
+++ b/drivers/net/wireless/ath/ath9k/hw.h
@@ -743,8 +743,10 @@ enum ath_cal_list {
 struct ath_hw {
 	struct ath_ops reg_ops;
 
-	struct timespec last_puttxbuf;
-	struct timespec last_interrupt_tx;
+	struct timespec last_puttxbuf[1000];
+	struct timespec last_interrupt_tx[1000];
+	u32 current_timing_count;
+	u32 max_timing_count;
 	u32 force_quiet_bit_delay;
 	u32 force_quiet_bit_restore_in;
 	bool force_quiet_bit_restore;
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -502,6 +502,8 @@ static int ath9k_init_softc(u16 devid, s
 	ath9k_ah->force_quiet_bit_delay = 0;
 	ath9k_ah->force_quiet_bit_restore = true;
 	ath9k_ah->force_quiet_bit_restore_in = 0;
+	ath9k_ah->current_timing_count = 0;
+	ath9k_ah->max_timing_count = 1;
 	ath9k_ah->dev = sc->dev;
 	ath9k_ah->hw = sc->hw;
 	ath9k_ah->hw_version.devid = devid;
--- a/drivers/net/wireless/ath/ath9k/mac.c
+++ b/drivers/net/wireless/ath/ath9k/mac.c
@@ -51,15 +51,18 @@ EXPORT_SYMBOL(ath9k_hw_gettxbuf);
 
 void ath9k_hw_puttxbuf(struct ath_hw *ah, u32 q, u32 txdp)
 {
-	getnstimeofday(&ah->last_puttxbuf);
+	if (q != ATH9K_NUM_TX_QUEUES - 1)	//exclude becon queue
+		getnstimeofday(&ah->last_puttxbuf[ah->current_timing_count++]);
 	REG_WRITE(ah, AR_QTXDP(q), txdp);
-	if (ah->force_quiet_bit_delay) {
-		udelay(ah->force_quiet_bit_delay);
-		REG_SET_BIT(ah, AR_PCU_MISC, AR_PCU_FORCE_QUIET_COLL);
-		if (ah->force_quiet_bit_restore) {
-			udelay(ah->force_quiet_bit_restore_in);
-			getnstimeofday(&ah->last_interrupt_tx);
-			REG_CLR_BIT(ah, AR_PCU_MISC, AR_PCU_FORCE_QUIET_COLL);
+	if (q != ATH9K_NUM_TX_QUEUES - 1) {
+		if (ah->force_quiet_bit_delay) {
+			udelay(ah->force_quiet_bit_delay);
+			REG_SET_BIT(ah, AR_PCU_MISC, AR_PCU_FORCE_QUIET_COLL);
+			if (ah->force_quiet_bit_restore) {
+				udelay(ah->force_quiet_bit_restore_in);
+				getnstimeofday(&ah->last_interrupt_tx[ah->current_timing_count - 1]);
+				REG_CLR_BIT(ah, AR_PCU_MISC, AR_PCU_FORCE_QUIET_COLL);
+			}
 		}
 	}
 }
--- a/drivers/net/wireless/ath/ath9k/xmit.c
+++ b/drivers/net/wireless/ath/ath9k/xmit.c
@@ -2577,16 +2577,29 @@ void ath_tx_edma_tasklet(struct ath_soft
 
 		struct timespec now_ts, diff, diff2;
 
-		getnstimeofday(&now_ts);
-		diff = timespec_sub(now_ts, ah->last_puttxbuf);
-		diff2 = timespec_sub(now_ts, ah->last_interrupt_tx);
-		if (!ah->force_quiet_bit_restore || ah->force_quiet_bit_delay == 0)
-			ath_dbg(common, TXDELAY, "time since put tx buf %ldus\n",
-					diff.tv_sec * 1000000 + diff.tv_nsec / 1000);
-		else
-			ath_dbg(common, TXDELAY, "time since put tx buf and force_quiet_bit %ldus, %ldus\n",
-					diff.tv_sec * 1000000 + diff.tv_nsec / 1000,
-					diff2.tv_sec * 1000000 + diff2.tv_nsec / 1000);
+		getnstimeofday(&now_ts);	// get current time
+		/* get the diff since last put tx buf and restore quiet collision */
+		diff = timespec_sub(now_ts, ah->last_puttxbuf[ah->current_timing_count - 1]);
+		ah->last_puttxbuf[ah->current_timing_count - 1] = diff;
+		diff2 = timespec_sub(now_ts, ah->last_interrupt_tx[ah->current_timing_count - 1]);
+		ah->last_interrupt_tx[ah->current_timing_count - 1] = diff2;
+		/* if reach max_timing_count then output kernel log */
+		if (ah->current_timing_count >= ah->max_timing_count) {
+			int i;
+			for (i = 0; i < ah->current_timing_count; i++) {
+				diff = ah->last_puttxbuf[i];
+				diff2 = ah->last_interrupt_tx[i];
+				if (!ah->force_quiet_bit_restore || ah->force_quiet_bit_delay == 0)
+					ath_dbg(common, TXDELAY, "time since put tx buf %4ldus\n",
+							diff.tv_sec * 1000000 + diff.tv_nsec / 1000);
+				else
+					ath_dbg(common, TXDELAY,
+							"time since put tx buf %4ldus, force_quiet_bit %4ldus\n",
+							diff.tv_sec * 1000000 + diff.tv_nsec / 1000,
+							diff2.tv_sec * 1000000 + diff2.tv_nsec / 1000);
+			}
+			ah->current_timing_count = 0;
+		}
 
 		txq = &sc->tx.txq[ts.qid];
 
