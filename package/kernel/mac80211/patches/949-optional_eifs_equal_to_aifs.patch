--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -1049,6 +1049,50 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t read_eifs_equal_to_aifs(struct file *file, char __user *user_buf,
+											size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	char buf[32];
+	unsigned int len;
+
+	len = sprintf(buf, "%d\n", sc->sc_ah->eifs_equal_to_aifs);
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_eifs_equal_to_aifs(struct file *file, char __user *user_buf,
+											size_t count, loff_t *ppos)
+{
+	struct ath_softc *sc = file->private_data;
+	struct ath_hw *ah = sc->sc_ah;
+	unsigned long eifs_equal_to_aifs;
+	char buf[32];
+	ssize_t len;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+
+	buf[len] = '\0';
+	if (kstrtoul(buf, 0, &eifs_equal_to_aifs))
+		return -EINVAL;
+
+	ah->eifs_equal_to_aifs = !!eifs_equal_to_aifs;
+
+	if (!eifs_equal_to_aifs)
+		REG_WRITE(ah, AR_D_GBL_IFS_EIFS, 
+			ath9k_hw_common(ah)->clockrate * AR_D_GBL_IFS_EIFS_ASYNC_FIFO);
+	return count;
+}
+
+static const struct file_operations fops_eifs_equal_to_aifs= {
+	.read = read_eifs_equal_to_aifs,
+	.write = write_eifs_equal_to_aifs,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t read_file_regidx(struct file *file, char __user *user_buf,
                                 size_t count, loff_t *ppos)
 {
@@ -1631,6 +1675,9 @@ int ath9k_init_debug(struct ath_hw *ah)
 	debugfs_create_u32("force_quiet_bit_restore_in", S_IRUSR | S_IWUSR,
 				sc->debug.debugfs_phy,
 				&ah->force_quiet_bit_restore_in);
+	debugfs_create_file("eifs_equal_to_aifs", S_IRUSR | S_IWUSR,
+				sc->debug.debugfs_phy, sc,
+				&fops_eifs_equal_to_aifs);
 	debugfs_create_file("max_timing_count", S_IRUSR | S_IWUSR,
 				sc->debug.debugfs_phy, sc,
 				&fops_max_timing_count);
--- a/drivers/net/wireless/ath/ath9k/hw.h
+++ b/drivers/net/wireless/ath/ath9k/hw.h
@@ -750,6 +750,7 @@ struct ath_hw {
 	u32 force_quiet_bit_delay;
 	u32 force_quiet_bit_restore_in;
 	bool force_quiet_bit_restore;
+	bool eifs_equal_to_aifs;
 	struct device *dev;
 	struct ieee80211_hw *hw;
 	struct ath_common common;
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -504,6 +504,7 @@ static int ath9k_init_softc(u16 devid, s
 	ath9k_ah->force_quiet_bit_restore_in = 0;
 	ath9k_ah->current_timing_count = 0;
 	ath9k_ah->max_timing_count = 1;
+	ath9k_ah->eifs_equal_to_aifs = true;
 	ath9k_ah->dev = sc->dev;
 	ath9k_ah->hw = sc->hw;
 	ath9k_ah->hw_version.devid = devid;
--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -1580,6 +1580,15 @@ static int ath9k_conf_tx(struct ieee8021
 	if (ret)
 		ath_err(common, "TXQ Update failed\n");
 
+	// update eifs if necessary
+	if (queue == IEEE80211_AC_BE && sc->sc_ah->eifs_equal_to_aifs) {
+		u32 sifs_in_clock, slottime_in_clock, eifs_in_clock;
+		sifs_in_clock = REG_READ(sc->sc_ah, AR_D_GBL_IFS_SIFS);
+		slottime_in_clock = REG_READ(sc->sc_ah, AR_D_GBL_IFS_SLOT);
+		eifs_in_clock = sifs_in_clock + params->aifs * slottime_in_clock;
+		REG_WRITE(sc->sc_ah, AR_D_GBL_IFS_EIFS, eifs_in_clock);
+	}
+
 	mutex_unlock(&sc->mutex);
 	ath9k_ps_restore(sc);
 
